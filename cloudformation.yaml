AWSTemplateFormatVersion: 2010-09-09
Description: Advent of Code 2018 random language generator
Parameters:
  S3Bucket:
    Description: S3 bucket where we store our lambda deployment artifacts
    Type: String
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  LambdaToday:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: "today-endpoint.zip"
      Handler: "language-pool.index"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: 15
      MemorySize: 128
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaToday
      Principal: apigateway.amazonaws.com
      #SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiFrontend}/*/*/*"
  ApiFrontend:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "API Gateway AoC2018"
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiFrontend
      ResourceId: !GetAtt ApiFrontend.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  GetToday:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiFrontend
      ResourceId: !GetAtt ApiFrontend.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - !GetAtt LambdaToday.Arn
              - "/invocations"
      MethodResponses:
        - StatusCode: 200

  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiFrontend
      StageName: production
    DependsOn: [OptionsMethod, GetToday]

Outputs:
  AppURL:
    Value: !Sub "https://${ApiFrontend}.execute-api.us-east-1.amazonaws.com/production"
